/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package com.heeere.omiscidgui.eaa.adapterframework;

import com.heeere.omiscidgui.eaa.adapterframework.model.AdapterFrameworkModel;
import com.heeere.omiscidgui.eaa.adapterframework.visual.PropertyEditorSetter;
import com.heeere.omiscidgui.eaa.adapterframework.visual.ProposalGraphScene;
import fr.prima.omiscidgui.browser.ServiceClient;
import java.beans.IntrospectionException;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.logging.Logger;
import org.openide.util.Exceptions;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;
//import org.openide.util.ImageUtilities;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.nodes.BeanNode;
import org.openide.nodes.Node;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
    dtd="-//fr.prima.omiscidgui.adapterframework//BindingPanel//EN",
    autostore=false
)
public final class BindingPanelTopComponent extends TopComponent {


    AdapterFrameworkModel model;

    public AdapterFrameworkModel getModel() {
        return model;
    }

    PropertyChangeListener listener = new PropertyChangeListener() {
        public void propertyChange(PropertyChangeEvent evt) {
            updateModelView();
        }
    };
    

    private void updateModelView() {
        //fullTextArea.setText(model.deepToString("", "… ", 7));
    }
    ServiceClient serviceClient;

    public ServiceClient getServiceClient() {
        return serviceClient;
    }
    public void setModel(AdapterFrameworkModel newModel, ServiceClient serviceClient) {
        this.serviceClient = serviceClient;
        AdapterFrameworkModel old = this.model;
        if (old != null) {
            old.removePropertyChangeListener(listener);
        }
        this.model = newModel;
        firePropertyChange("model", old, this.model);
        if (newModel != null) {
            newModel.addPropertyChangeListener(listener);
            updateModelView();
        }
        ProposalGraphScene proposalGraphScene = new ProposalGraphScene(upperPane, model);
        proposalGraphScene.setPropertyEditorSetter(new PropertyEditorSetter() {

            public void setNodeToDisplayInProperties(Node node) {
                if (node != null) {
                    setActivatedNodes(new Node[]{node});
                } else {
                    setActivatedNodes(new Node[]{});
                }
            }

            public void setBeanToDisplayInProperties(Object bean) {
                if (bean != null) {
                    try {
                        setActivatedNodes(new Node[]{new BeanNode(bean)});
                    } catch (IntrospectionException ex) {
                        Exceptions.printStackTrace(ex);
                    }
                } else {
                    setActivatedNodes(new Node[]{});
                }
            }
        });
        upperPane.setViewportView(proposalGraphScene.createView());

    }

    public BindingPanelTopComponent(AdapterFrameworkModel model) {
        this.model = model;
    }
    

    private static BindingPanelTopComponent instance;
    /** path to the icon used by the component and its open action */
//    static final String ICON_PATH = "SET/PATH/TO/ICON/HERE";

    private static final String PREFERRED_ID = "BindingPanelTopComponent";

    public BindingPanelTopComponent() {
        initComponents();
        setName(NbBundle.getMessage(BindingPanelTopComponent.class, "CTL_BindingPanelTopComponent"));
        setToolTipText(NbBundle.getMessage(BindingPanelTopComponent.class, "HINT_BindingPanelTopComponent"));
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        upperPane = new javax.swing.JScrollPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        fullTextArea = new javax.swing.JTextArea();

        jSplitPane1.setDividerLocation(2000);
        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jSplitPane1.setOneTouchExpandable(true);
        jSplitPane1.setLeftComponent(upperPane);

        fullTextArea.setColumns(20);
        fullTextArea.setRows(5);
        jScrollPane1.setViewportView(fullTextArea);

        jSplitPane1.setBottomComponent(jScrollPane1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 478, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 427, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea fullTextArea;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JScrollPane upperPane;
    // End of variables declaration//GEN-END:variables
    /**
     * Gets default instance. Do not use directly: reserved for *.settings files only,
     * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
     * To obtain the singleton instance, use {@link #findInstance}.
     */
    public static synchronized BindingPanelTopComponent getDefault() {
        if (instance == null) {
            instance = new BindingPanelTopComponent();
        }
        return instance;
    }

    /**
     * Obtain the BindingPanelTopComponent instance. Never call {@link #getDefault} directly!
     */
    public static synchronized BindingPanelTopComponent findInstance() {
        TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
        if (win == null) {
            Logger.getLogger(BindingPanelTopComponent.class.getName()).warning(
                    "Cannot find " + PREFERRED_ID + " component. It will not be located properly in the window system.");
            return getDefault();
        }
        if (win instanceof BindingPanelTopComponent) {
            return (BindingPanelTopComponent) win;
        }
        Logger.getLogger(BindingPanelTopComponent.class.getName()).warning(
                "There seem to be multiple components with the '" + PREFERRED_ID +
                "' ID. That is a potential source of errors and unexpected behavior.");
        return getDefault();
    }

    @Override
    public int getPersistenceType() {
        return TopComponent.PERSISTENCE_ALWAYS;
    }

    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    Object readProperties(java.util.Properties p) {
        BindingPanelTopComponent singleton = BindingPanelTopComponent.getDefault();
        singleton.readPropertiesImpl(p);
        return singleton;
    }

    private void readPropertiesImpl(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    protected String preferredID() {
        return PREFERRED_ID;
    }

}
