// Autogenerated, edition is futile
package com.heeere.omiscidgui.eaa.adapterframework.model;

public class ServiceSpecification {

    protected java.beans.PropertyChangeSupport ___pcs = new java.beans.PropertyChangeSupport(this);
    public void addPropertyChangeListener(java.beans.PropertyChangeListener l) {___pcs.addPropertyChangeListener(l);}
    public void removePropertyChangeListener(java.beans.PropertyChangeListener l) {___pcs.removePropertyChangeListener(l);}
    public ServiceSpecification(String name, java.util.List<ServiceProperty> serviceProperties) {
        this.name = name;
        this.serviceProperties = serviceProperties;
    }

    public ServiceSpecification(String name) {
        this.name = name;
        this.serviceProperties = CollectionFactory.list();
    }

    private String name;
    public String getName() {
        return name;
    }
    public void setName(String name) {
        String __old = this.name;
        this.name = name;
        ___pcs.firePropertyChange("name", __old, this.name);
    }

    private java.util.List<ServiceProperty> serviceProperties;
    public java.util.List<ServiceProperty> getServiceProperties() {
        return serviceProperties;
    }
    public void setServiceProperties(java.util.List<ServiceProperty> serviceProperties) {
        java.util.List<ServiceProperty> __old = this.serviceProperties;
        this.serviceProperties = serviceProperties;
        ___pcs.firePropertyChange("serviceProperties", __old, this.serviceProperties);
    }
    public void addToServiceProperties(ServiceProperty o) {
        this.serviceProperties.add(o);
    }
    public boolean removeFromServiceProperties(ServiceProperty o) {
        return this.serviceProperties.remove(o);
    }

    public String deepToString(String indent, String delta, int maxDepth) {
        if (maxDepth <= 0) { return "!!!MAX!!!\n";}
        StringBuilder res = new StringBuilder();
        String nextIndent = indent + delta;
        String nextNextIndent = nextIndent + delta;
        res.append("ServiceSpecification {\n");
        res.append(nextIndent).append("name: ");
        res.append(name).append("\n");
        res.append(nextIndent).append("serviceProperties: ");
        res.append("[\n");
        for (ServiceProperty ___o : serviceProperties) res.append(nextNextIndent).append(___o.deepToString(nextNextIndent, delta, maxDepth-1));
        res.append(nextIndent).append("]\n");
        res.append(indent).append("} // ServiceSpecification\n");
        return res.toString();
    }

    public ServiceSpecification smartDeepCopy() {
        java.util.HashMap<Object,Object> conversion = new java.util.HashMap<Object,Object>();
        return smartDeepCopyInto(conversion);
    }
    /*package*/ ServiceSpecification smartDeepCopyInto(java.util.HashMap<Object,Object> conversion) {
        if (conversion.containsKey(this)) return (ServiceSpecification) conversion.get(this);
        ServiceSpecification ___res = new ServiceSpecification();
        conversion.put(this, ___res);
        ___res.name = name;
        for (ServiceProperty ___serviceProperties : serviceProperties) {
            if (___serviceProperties == null) {
                ___res.addToServiceProperties(null);
            } else {
                ___res.addToServiceProperties(___serviceProperties.smartDeepCopyInto(conversion));
            }
        }
        return ___res;
    }
    /*package*/ ServiceSpecification() {
        this.name = null;
        this.serviceProperties = new java.util.Vector<ServiceProperty>();
    }

}
