// Autogenerated, edition is futile
package com.heeere.omiscidgui.eaa.adapterframework.model;

// testing deferred header script
public class Adapter {

    protected java.beans.PropertyChangeSupport ___pcs = new java.beans.PropertyChangeSupport(this);
    public void addPropertyChangeListener(java.beans.PropertyChangeListener l) {___pcs.addPropertyChangeListener(l);}
    public void removePropertyChangeListener(java.beans.PropertyChangeListener l) {___pcs.removePropertyChangeListener(l);}
    public static enum Mode {TEMPLATE, PROPOSED, PRESENT, IN_CREATION}
    public Adapter(Mode mode, RequiredSlot required, ProvidedSlot provided, java.util.List<Parameter> parameters, fr.prima.omiscid.user.service.ServiceProxy possibleServiceProxy) {
        this.mode = mode;
        this.required = required;
        this.provided = provided;
        this.parameters = parameters;
        this.possibleServiceProxy = possibleServiceProxy;
    }

    public Adapter(Mode mode, RequiredSlot required, ProvidedSlot provided, fr.prima.omiscid.user.service.ServiceProxy possibleServiceProxy) {
        this.mode = mode;
        this.required = required;
        this.provided = provided;
        this.parameters = CollectionFactory.list();
        this.possibleServiceProxy = possibleServiceProxy;
    }

    private Mode mode;
    public Mode getMode() {
        return mode;
    }
    public void setMode(Mode mode) {
        Mode __old = this.mode;
        this.mode = mode;
        ___pcs.firePropertyChange("mode", __old, this.mode);
    }

    private RequiredSlot required;
    public RequiredSlot getRequired() {
        return required;
    }
    public void setRequired(RequiredSlot required) {
        RequiredSlot __old = this.required;
        this.required = required;
        ___pcs.firePropertyChange("required", __old, this.required);
    }

    private ProvidedSlot provided;
    public ProvidedSlot getProvided() {
        return provided;
    }
    public void setProvided(ProvidedSlot provided) {
        ProvidedSlot __old = this.provided;
        this.provided = provided;
        ___pcs.firePropertyChange("provided", __old, this.provided);
    }

    private java.util.List<Parameter> parameters;
    public java.util.List<Parameter> getParameters() {
        return parameters;
    }
    public void setParameters(java.util.List<Parameter> parameters) {
        java.util.List<Parameter> __old = this.parameters;
        this.parameters = parameters;
        ___pcs.firePropertyChange("parameters", __old, this.parameters);
    }
    public void addToParameters(Parameter o) {
        this.parameters.add(o);
    }
    public boolean removeFromParameters(Parameter o) {
        return this.parameters.remove(o);
    }

    private fr.prima.omiscid.user.service.ServiceProxy possibleServiceProxy;
    public fr.prima.omiscid.user.service.ServiceProxy getPossibleServiceProxy() {
        return possibleServiceProxy;
    }
    public void setPossibleServiceProxy(fr.prima.omiscid.user.service.ServiceProxy possibleServiceProxy) {
        fr.prima.omiscid.user.service.ServiceProxy __old = this.possibleServiceProxy;
        this.possibleServiceProxy = possibleServiceProxy;
        ___pcs.firePropertyChange("possibleServiceProxy", __old, this.possibleServiceProxy);
    }

    public String deepToString(String indent, String delta, int maxDepth) {
        if (maxDepth <= 0) { return "!!!MAX!!!\n";}
        StringBuilder res = new StringBuilder();
        String nextIndent = indent + delta;
        String nextNextIndent = nextIndent + delta;
        res.append("Adapter {\n");
        res.append(nextIndent).append("mode: ");
        res.append(mode).append("\n");
        res.append(nextIndent).append("required: ");
        if (null == required) {
            res.append("null\n");
        } else {
            res.append(required.deepToString(nextIndent, delta, maxDepth-1));
        }
        res.append(nextIndent).append("provided: ");
        if (null == provided) {
            res.append("null\n");
        } else {
            res.append(provided.deepToString(nextIndent, delta, maxDepth-1));
        }
        res.append(nextIndent).append("parameters: ");
        res.append("[\n");
        for (Parameter ___o : parameters) res.append(nextNextIndent).append(___o.deepToString(nextNextIndent, delta, maxDepth-1));
        res.append(nextIndent).append("]\n");
        res.append(nextIndent).append("possibleServiceProxy: ");
        res.append(possibleServiceProxy).append("\n");
        res.append(indent).append("} // Adapter\n");
        return res.toString();
    }

    public Adapter smartDeepCopy() {
        java.util.HashMap<Object,Object> conversion = new java.util.HashMap<Object,Object>();
        return smartDeepCopyInto(conversion);
    }
    /*package*/ Adapter smartDeepCopyInto(java.util.HashMap<Object,Object> conversion) {
        if (conversion.containsKey(this)) return (Adapter) conversion.get(this);
        Adapter ___res = new Adapter();
        conversion.put(this, ___res);
        ___res.mode = mode;
        if (null == required) {
            ___res.required = null;
        } else {
            ___res.required = required.smartDeepCopyInto(conversion);
        }
        if (null == provided) {
            ___res.provided = null;
        } else {
            ___res.provided = provided.smartDeepCopyInto(conversion);
        }
        for (Parameter ___parameters : parameters) {
            if (___parameters == null) {
                ___res.addToParameters(null);
            } else {
                ___res.addToParameters(___parameters.smartDeepCopyInto(conversion));
            }
        }
        ___res.possibleServiceProxy = possibleServiceProxy;
        return ___res;
    }
    /*package*/ Adapter() {
        this.mode = null;
        this.required = null;
        this.provided = null;
        this.parameters = new java.util.Vector<Parameter>();
        this.possibleServiceProxy = null;
    }

}
