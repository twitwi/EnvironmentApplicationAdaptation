// Autogenerated, edition is futile
package com.heeere.omiscidgui.eaa.adapterframework.model;

public class Parameter {

    protected java.beans.PropertyChangeSupport ___pcs = new java.beans.PropertyChangeSupport(this);
    public void addPropertyChangeListener(java.beans.PropertyChangeListener l) {___pcs.addPropertyChangeListener(l);}
    public void removePropertyChangeListener(java.beans.PropertyChangeListener l) {___pcs.removePropertyChangeListener(l);}
    public Parameter(String name, String type, String exactType, String defaultValue, SpecialValue specialValue, String possibleAffectedValue) {
        this.name = name;
        this.type = type;
        this.exactType = exactType;
        this.defaultValue = defaultValue;
        this.specialValue = specialValue;
        this.possibleAffectedValue = possibleAffectedValue;
    }

    private String name;
    public String getName() {
        return name;
    }
    public void setName(String name) {
        String __old = this.name;
        this.name = name;
        ___pcs.firePropertyChange("name", __old, this.name);
    }

    private String type;
    public String getType() {
        return type;
    }
    public void setType(String type) {
        String __old = this.type;
        this.type = type;
        ___pcs.firePropertyChange("type", __old, this.type);
    }

    private String exactType;
    public String getExactType() {
        return exactType;
    }
    public void setExactType(String exactType) {
        String __old = this.exactType;
        this.exactType = exactType;
        ___pcs.firePropertyChange("exactType", __old, this.exactType);
    }

    private String defaultValue;
    public String getDefaultValue() {
        return defaultValue;
    }
    public void setDefaultValue(String defaultValue) {
        String __old = this.defaultValue;
        this.defaultValue = defaultValue;
        ___pcs.firePropertyChange("defaultValue", __old, this.defaultValue);
    }

    private SpecialValue specialValue;
    public SpecialValue getSpecialValue() {
        return specialValue;
    }
    public void setSpecialValue(SpecialValue specialValue) {
        SpecialValue __old = this.specialValue;
        this.specialValue = specialValue;
        ___pcs.firePropertyChange("specialValue", __old, this.specialValue);
    }

    private String possibleAffectedValue;
    public String getPossibleAffectedValue() {
        return possibleAffectedValue;
    }
    public void setPossibleAffectedValue(String possibleAffectedValue) {
        String __old = this.possibleAffectedValue;
        this.possibleAffectedValue = possibleAffectedValue;
        ___pcs.firePropertyChange("possibleAffectedValue", __old, this.possibleAffectedValue);
    }

    public String deepToString(String indent, String delta, int maxDepth) {
        if (maxDepth <= 0) { return "!!!MAX!!!\n";}
        StringBuilder res = new StringBuilder();
        String nextIndent = indent + delta;
        String nextNextIndent = nextIndent + delta;
        res.append("Parameter {\n");
        res.append(nextIndent).append("name: ");
        res.append(name).append("\n");
        res.append(nextIndent).append("type: ");
        res.append(type).append("\n");
        res.append(nextIndent).append("exactType: ");
        res.append(exactType).append("\n");
        res.append(nextIndent).append("defaultValue: ");
        res.append(defaultValue).append("\n");
        res.append(nextIndent).append("specialValue: ");
        if (null == specialValue) {
            res.append("null\n");
        } else {
            res.append(specialValue.deepToString(nextIndent, delta, maxDepth-1));
        }
        res.append(nextIndent).append("possibleAffectedValue: ");
        res.append(possibleAffectedValue).append("\n");
        res.append(indent).append("} // Parameter\n");
        return res.toString();
    }

    public Parameter smartDeepCopy() {
        java.util.HashMap<Object,Object> conversion = new java.util.HashMap<Object,Object>();
        return smartDeepCopyInto(conversion);
    }
    /*package*/ Parameter smartDeepCopyInto(java.util.HashMap<Object,Object> conversion) {
        if (conversion.containsKey(this)) return (Parameter) conversion.get(this);
        Parameter ___res = new Parameter();
        conversion.put(this, ___res);
        ___res.name = name;
        ___res.type = type;
        ___res.exactType = exactType;
        ___res.defaultValue = defaultValue;
        if (null == specialValue) {
            ___res.specialValue = null;
        } else {
            ___res.specialValue = specialValue.smartDeepCopyInto(conversion);
        }
        ___res.possibleAffectedValue = possibleAffectedValue;
        return ___res;
    }
    /*package*/ Parameter() {
        this.name = null;
        this.type = null;
        this.exactType = null;
        this.defaultValue = null;
        this.specialValue = null;
        this.possibleAffectedValue = null;
    }

}
